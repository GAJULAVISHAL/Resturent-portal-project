// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  role       Role
  createdAt  DateTime  @default(now())
  
  // For ADMIN users: a unique admin code that must be provided.
  // For non-admin users, this field is null.
  adminCode  String?   @unique

  // For non-admin users: the admin they belong to.
  adminId    Int?
  admin      User?     @relation("AdminStaff", fields: [adminId], references: [id])
  
  // For admin users: all staff members attached to them.
  staff      User[]    @relation("AdminStaff")
  
  // If applicable: Orders placed by the user (e.g., if they are waiters).
  orders     Orders[]
  
  // For ADMIN users: all menu items they own.
  menuItems  MenuItems[]
}

model MenuItems {
  id          Int         @id @default(autoincrement())
  name        String
  price       Int
  imageUrl    String?
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  
  // Category assigned to the menu item.
  category    Category
  
  // Relation: Menu item is linked to an admin user.
  adminId     Int
  admin       User        @relation(fields: [adminId], references: [id])
  
  // Relation: A menu item can appear in many order items.
  orderItems  OrderItems[]
}

model Orders {
  id           Int         @id @default(autoincrement())
  tableNumber  Int
  createdAt    DateTime    @default(now())
  
  // Relation: Waiter who took the order (if applicable).
  waiterId     Int?
  waiter       User?       @relation(fields: [waiterId], references: [id])
  
  // Relation: All order items belonging to this order.
  items        OrderItems[]
}

model OrderItems {
  id           Int         @id @default(autoincrement())
  quantity     Int
  
  // Relation: Menu item ordered.
  menuItemId   Int
  menuItem     MenuItems   @relation(fields: [menuItemId], references: [id])
  
  // Relation: Order to which this item belongs.
  orderId      Int
  order        Orders      @relation(fields: [orderId], references: [id])
}

enum Role {
  ADMIN
  WAITER
  KITCHEN
}

enum Category {
  JUICE
  MILKSHAKE
  SMOOTHIE
  SALAD
  SHARJAH
  LASSI
  MOJITO
  FALOODA
  CHAAT
  FRIES
}